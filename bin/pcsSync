#!/bin/bash
#####################################################################################
#
# Author: mtjo
# Web Home: http://mtjo.net/
#####################################################################################
# set config_file for your config storage path.
config_file="syncy.conf"

# load config file
[[ ! -f "$config_file" ]] && echo "ERROR: config file \"$config_file\" does not exist." && exit 1
. $config_file
VERSION="1.0.5"
#  don't modify pcsroot value.
pcsroot="/apps/mtjo"

_init() {
	if ! type curl >/dev/null 2>&1 ; then
		echo "ERROR: The system must be installed curl!"
		exit 1
	fi
	[[ -z $burstblocksize || $((burstblocksize)) -lt 1 ]] && burstblocksize=10 && echo "ERROR: \"burstblocksize\" must great than or equal to 1(M), set to default 10(M)."
	[[ -z $dlblocksize || $((dlblocksize)) -lt 1 ]] && dlblocksize=4 && echo "ERROR: \"dlblocksize\" must great than or equal 1(M), set to default 4(M)."
	[[ $ondup != "overwrite"  &&  $ondup != "rename" ]] && ondup="overwrite" && echo "WARNING: ondup is invalid, set to default(overwrite)."
	[[ -z "$tmpdir" ]] && tmpdir="/tmp"
	[[ -z "$tmpdir"  ||  ! -e "$tmpdir" ]] && tmpdir="/tmp" && echo "WARNING: temporary directory($tmpdir) does not exist, set to default(/tmp)."
	[[ -z "$syncyerrlog"  ||  ! -e $(dirname "$syncyerrlog") ]] && echo "WARNING: the directory of save error log does not exist."
	[[ $bufferMemory != "on"  &&  $bufferMemory != "off" ]] && bufferMemory='off' && echo "WARNING: \"bufferMemory\" is invalid, set to default(off)."
	[[ -z "$unicodetable"  ||  ! -e "$unicodetable" ]] && echo "WARNING: \"unicodetable\" is invalid.Will unable to convert Chinese path name."
	[[ -e "$unicodetable"  &&  ! -e $unicodetable".syy" ]] && touch $unicodetable".syy"
	[[ -z "$retrytimes" || $retrytimes -lt 0 ]] && retrytimes=3 && echo "\"retrytimes\" is invalid. set to default(3 times)."
	[[ -z "$retrydelay" || $retrydelay -lt 0 ]] && retrydelay=3 && echo "\"retrydelay\" is invalid. set to default(3 second)."
	if [[ -z "$refresh_token" ]]; then
		if [[ -z "$device_code" ]]; then
			local response=$(curl -k -sL "http://www.syncy.cn/syserver?method=bind_device&scope=basic,netdisk")
			local iserror=$(echo $response | sed -rn 's/.*\"(error).*/\1/p')
			[[ -n "$iserror" ]] && echo "ERROR: \"$response\"." && exit 1
			device_code=$(echo $response | get_device_code)
			user_code=$(echo $response | get_user_code)
			echo "Device binding Guide:"
			echo  "     1. Open web browser to visit:\"https://openapi.baidu.com/device\" and input user code to binding your baidu account."
			echo " "
			echo -e "     2. User code:\033[31m $user_code\033[0m"
			echo "     (The user code is available for 30 minutes.)"
			echo " "
			echo -n "     3. After granting access to the application, come back here and press [Enter] to continue."
			read
		fi
		local response=$(curl -sLk "http://www.syncy.cn/syserver?method=get_device_token&code=$device_code")
		local iserror=$(echo $response | sed -rn 's/.*\"(error).*/\1/p')
		[[ -n "$iserror" ]] && echo "ERROR: Get device token failed, error message:"$'\n'"\"$response\"." && exit 1
		refresh_token=$(echo $response | get_refresh_token)
		access_token=$(echo $response | get_access_token)
		expires_in=$(echo $response | get_expires_in)
		refresh_date=$(date +'%s')
		compress_date=$(date +'%s')
		synctotal=0
		save_value device_code $device_code
		save_value refresh_token $refresh_token
		save_value access_token $access_token
		save_value expires_in $expires_in
		save_value refresh_date $refresh_date
		save_value compress_date $compress_date
		save_value synctotal $synctotal
		echo "Get device token success."
	fi
	if [[ $((refresh_date + expires_in - 864000)) -le $(date +'%s') ]]; then
		refresh_access_token
	fi
	if [[ $((compress_date + 2592000)) -le $(date +'%s')  ||  $synctotal -ge 10000 ]]; then
		echo "$(date +'%Y-%m-%d %H:%M:%S') Sync data from the last compression has 30 days, or total of sync files more than 1000 since from last compression." >> $syncyerrlog
		echo "$(date +'%Y-%m-%d %H:%M:%S') Compress method: syncy.sh compress" >> $syncyerrlog
		echo "$(date +'%Y-%m-%d %H:%M:%S') Sync data from the last compression has 30 days, or total of sync files more than 1000 since from last compression."
		echo "$(date +'%Y-%m-%d %H:%M:%S') Compress method: syncy.sh compressdata"
	fi
}
get_device_code() {
	sed -rn 's/.*\"device_code\":\"([0-9a-z]+)\".*/\1/p'
}
get_user_code() {
	sed -rn 's/.*\"user_code\":\"([0-9a-z]+)\".*/\1/p'
}
get_refresh_token() {
	sed -rn 's/.*\"refresh_token\":\"([^"]+)\".*/\1/p'
}
get_access_token() {
	sed -rn 's/.*\"access_token\":\"([^"]+)\".*/\1/p'
}
get_expires_in() {
	sed -rn 's/.*\"expires_in\":([0-9]+).*/\1/p'
}
save_value() {
		grep "$1" "$config_file" >/dev/null 2>&1 || { echo "$1=$2" >> $config_file; return 0; }
		sed -i "s/$1=.*/$1=$2/g" $config_file
		return 0
}
checkUpdate() {
	local response=$(curl -sLk --connect-timeout 10 "http://www.syncy.cn/syserver?method=get_last_version&edition=bash&ver=${VERSION}")
	lastVer=${response%%#*}
	message=${response#*#}
	if [[ $lastVer != $VERSION ]]; then
        echo $message >> $syncyerrlog
        echo $message
    fi
}
refresh_access_token() {
	local response=$(curl -sLk --connect-timeout 10 "http://mtjo.net/baiduSync/oauth.php?method=refresh_access_token&refresh_token=$refresh_token")
	local iserror=$(echo $response | sed -rn 's/.*\"(error).*/\1/p')
	[[ -n "$iserror" ]] && echo "ERROR: \"$response\"." && return 1
	refresh_token=$(echo $response | get_refresh_token)
	access_token=$(echo $response | get_access_token)
	expires_in=$(echo $response | get_expires_in)
	refresh_date=$(date +'%s')
	save_value refresh_token $refresh_token
	save_value access_token $access_token
	save_value expires_in $expires_in
	save_value refresh_date $refresh_date
	echo "$(date +'%Y-%m-%d %H:%M:%S') Refresh access token success."
	checkUpdate
    return 0
}
_init
encodeUrl() {
    encoded_str=$(echo "$*" | awk 'BEGIN {
        split ("1 2 3 4 5 6 7 8 9 A B C D E F", hextab, " ")
        hextab [0] = 0
        for (i=1; i<=255; ++i) {
            ord [ sprintf ("%c", i) "" ] = i + 0
        }
    }
    {
        encoded = ""
        for (i=1; i<=length($0); ++i) {
            c = substr ($0, i, 1)
            if ( c ~ /[a-zA-Z0-9.-]/ ) {
                encoded = encoded c
            } else if ( c == " " ) {
                encoded = encoded "+"
            } else {
                lo = ord [c] % 16
                hi = int (ord [c] / 16);
                encoded = encoded "%" hextab [hi] hextab [lo]
            }
        }
        print encoded
    }' 2>/dev/null)
}
getPcsQuota() {
	local retrycnt=0
	while [[ $retrycnt -le $retrytimes ]]; do
		[[ $retrycnt -gt 0 ]] && sleep $retrydelay's'
		local response=$(curl -X GET --retry $retrytimes -A '' -sLk "https://pcs.baidu.com/rest/2.0/pcs/quota?method=info&access_token=$access_token")
		local iserror=$(echo $response | sed -rn 's/.*\"(error).*/\1/p')
		if [[ -n "$iserror" || ${#response} -eq 0 ]]; then
			retrycnt=$((retrycnt + 1))
		else
			break
		fi
	done
	[[ ${#response} -eq 0 ]] && echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): Server not response on get pcs quota." >> $syncyerrlog && return 1
	[[ -n "$iserror" ]] && echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): Get pcs quota failed,$response." >> $syncyerrlog && return 1
	quota=$(echo $response | sed -rn 's/.*\"quota\":([0-9]+).*/\1/p')
    used=$(echo $response | sed -rn 's/.*\"used\":([0-9]+).*/\1/p')
    quota=$((quota /1024/1024/1024))
    used=$((used /1024/1024/1024))
    echo "$(date +'%Y-%m-%d %H:%M:%S') PCS quota is ${quota}G,used ${used}G."
    return 0
}
getPcsFileMeta() {
    encodeUrl "$1"
	local retrycnt=0
	while [[ $retrycnt -le $retrytimes ]]; do
		[[ $retrycnt -gt 0 ]] && sleep $retrydelay's'
		response_str=$(curl -X GET --retry $retrytimes -A '' -sLk "https://pcs.baidu.com/rest/2.0/pcs/file?method=meta&access_token=$access_token&path=$encoded_str")
		local iserror=$(echo $response_str | sed -rn 's/.*\"(error).*/\1/p')
		if [[ -n "$iserror" || ${#response_str} -eq 0 ]]; then
			retrycnt=$((retrycnt + 1))
		else
			break
		fi
	done
	[[ ${#response_str} -eq 0 ]] && echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): Server not response on get pcs file meta." >> $syncyerrlog && return 1
	[[ -n "$iserror" ]] && echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): Get file meta failed: $1" >> $syncyerrlog && return 1
	return 0
}
getPcsFileList() {
	unset errcode
    if [[ $# -ne 3 ]]; then
        echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): Get file list failed: parameters number error." >> $syncyerrlog && return 1
    fi
    encodeUrl "$1"
    local limit="$2-$3"
	local retrycnt=0
	while [[ $retrycnt -le $retrytimes ]]; do
		[[ $retrycnt -gt 0 ]] && sleep $retrydelay's'
		response_str=$(curl -X GET --retry $retrytimes -A '' -sLk "https://pcs.baidu.com/rest/2.0/pcs/file?method=list&access_token=$access_token&path=$encoded_str&limit=$limit&by=name&order=asc")
		if [[ ${#response_str} -lt 600 ]]; then
			local iserror=$(echo $response_str | sed -rn 's/.*\"(error).*/\1/p')
		fi
		if [[ -n "$iserror" || ${#response_str} -eq 0 ]]; then
			retrycnt=$((retrycnt + 1))
		else
			break
		fi
	done
	[[ ${#response_str} -eq 0 ]] && echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): Server not response on get pcs file list($1)." >> $syncyerrlog && return 1
	if [[ -n "$iserror" ]]; then
        errcode=$(echo "$response_str" | sed -rn 's/.*\"error_code\":([0-9]+),.*/\1/p')
		[[ -z "$errcode" ]] && errcode=1
		if [[ $errcode -eq 31066 ]]; then
			return $errcode
		else
			echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): Get file list failed: $1,$response_str" >> $syncyerrlog
			errorcount=$((errorcount + 1))
			return $errcode
		fi
    fi
    unicodeDecode
    if [[ $? -eq 1 ]]; then
        echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): Decode unicode file list failed: $3." >> $syncyerrlog
        return 1
    fi
	return 0
}
mUpload2Pcs() {
    encodeUrl "$2"
	local retrycnt=0
	while [[ $retrycnt -le $retrytimes ]]; do
		[[ $retrycnt -gt 0 ]] && sleep $retrydelay's'
		local response=$(curl -sSLk --retry $retrytimes -A '' -F "file=@$1" "https://c.pcs.baidu.com/rest/2.0/pcs/file?method=upload&access_token=$access_token&path=$encoded_str&ondup=newcopy")
		local iserror=$(echo "$response" | sed -rn 's/.*\"(error).*/\1/p')
		if [[ -n "$iserror" || ${#response} -eq 0 ]]; then
			retrycnt=$((retrycnt + 1))
		else
			break
		fi
	done
	[[ ${#response} -eq 0 ]] && echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): Server not response on upload to pcs." >> $syncyerrlog && return 1
	[[ -n "$iserror" ]] && echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): Upload file to pcs failed: $1,$response." >> $syncyerrlog && return 1
	echo "$(date +'%Y-%m-%d %H:%M:%S') Upload file \"$1\" completed."
	return 0
}
uploadFile2Pcs() {
    encodeUrl "$4"
	local retrycnt=0
	while [[ $retrycnt -le $retrytimes ]]; do
		[[ $retrycnt -gt 0 ]] && sleep $retrydelay's'
		local response=$(curl -sSLk --retry $retrytimes -A '' -F "file=@\"$1\"" "https://c.pcs.baidu.com/rest/2.0/pcs/file?method=upload&access_token=$access_token&path=$encoded_str&ondup=$6")
		local iserror=$(echo "$response" | sed -rn 's/.*\"(error).*/\1/p')
		if [[ -n "$iserror" || ${#response} -eq 0 ]]; then
			retrycnt=$((retrycnt + 1))
		else
			break
		fi
	done
	[[ ${#response} -eq 0 ]] && echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): Server not response on upload to pcs." >> $syncyerrlog && return 1
	[[ -n "$iserror" ]] && echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): Upload file to pcs failed: $1,$response." >> $syncyerrlog && return 1
    local rsize=$(echo "$response" | sed -rn 's/.*\"size\":([0-9]+),.*/\1/p')
	local rmd5=$(echo "$response" | sed -rn 's/.*\"md5\":\"([^"]+)\".*/\1/p')
	if [[ -z "$rmd5" || -z "$rsize" || $rsize -ne $3 ]]; then
		echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): Upload File failed, remote file error : $1,$response." >> $syncyerrlog
        deletePcsFile "$4" "s"
        return 1
    fi
	echo "$rmd5 $2 $3 $5" >> $syncydb
	echo "$(date +'%Y-%m-%d %H:%M:%S') Upload file \"$1\" completed."
	return 0
}
rapidUploadFile2Pcs() {
	if [[ $3 -le 262144 ]]; then
		uploadFile2Pcs "$1" "$2" "$3" "$4" "$5" "$6"
		return $?
	fi
	local contentmd5=$(md5sum "$1" | cut -d ' ' -f1)
    local slicemd5=$(head -c 262144 "$1" | md5sum | cut -d ' ' -f1)
	encodeUrl "$4"
	local retrycnt=0
	while [[ $retrycnt -le $retrytimes ]]; do
		[[ $retrycnt -gt 0 ]] && sleep $retrydelay's'
		local response=$(curl -sSLk --retry $retrytimes -A '' "https://pcs.baidu.com/rest/2.0/pcs/file?method=rapidupload&access_token=$access_token&path=$encoded_str&content-length=$3&content-md5=$contentmd5&slice-md5=$slicemd5&ondup=$6")
		local iserror=$(echo "$response" | sed -rn 's/.*\"(error).*/\1/p')
		if [[ -n "$iserror" || ${#response} -eq 0 ]]; then
			retrycnt=$((retrycnt + 1))
		else
			break
		fi
	done
	[[ ${#response} -eq 0 ]] && echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): Server not response on rapid upload file to pcs." >> $syncyerrlog && return 1
	if [[ -n "$iserror" ]]; then
		errcode=$(echo "$response" | sed -rn 's/.*\"error_code\":([0-9]+),.*/\1/p')
		if [[ $errcode -eq 31079 ]]; then
			echo "$(date +'%Y-%m-%d %H:%M:%S') File md5 not found, upload the whole file($1)."
			if [[ $3 -le $((burstblocksize * 1048576 + 1048576)) ]]; then  #if file size less-than-or-equal-to  10M
				uploadFile2Pcs "$1" "$2" "$3" "$4" "$5" "$6"
				return $?
			else
				burstUploadFile2Pcs "$1" "$2" "$3" "$4" "$5" "$6"
				return $?
			fi
		else
			echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): Rapid upload file failed: $1,$response" >> $syncyerrlog
			return 1
		fi
	else
		local rsize=$(echo "$response" | sed -rn 's/.*\"size\":([0-9]+),.*/\1/p')
		local rmd5=$(echo "$response" | sed -rn 's/.*\"md5\":\"([^"]+)\".*/\1/p')
		[[ -z "$rmd5"  ||  -z "$rsize"  ||  $3 -ne $rsize ]] && echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): File is rapiduploaded,but can not get remote file size or mtime: $1,$response." >> $syncyerrlog && return 1
		echo "$rmd5 $2 $3 $5" >> $syncydb
		echo "$(date +'%Y-%m-%d %H:%M:%S') Rapid upload file \"$1\" completed."
		return 0
	fi
}
burstUploadFile2Pcs() {
	if [[ $3 -le $(((burstblocksize + 1) * 1048576)) ]]; then
		uploadFile2Pcs "$1" "$2" "$3" "$4" "$5" "$6"
		return $?
    elif [[ $3 -gt $((burstblocksize * 1073741824)) ]]; then
        echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): File $1 size out of setting, maxsize = burstblocksize * 1024M." >> $syncyerrlog
        return 1
	fi
	local startblk=0
	local upblkcount=$burstblocksize
	local param="{\"block_list\":["
	if [[ -e "$1.tmp.syy" ]]; then
		if [[ $(sed -n '1p' "$1.tmp.syy") != "upload $2 $3" ]]; then
            echo "upload $2 $3" > "$1.tmp.syy"
			echo "$(date +'%Y-%m-%d %H:%M:%S') Local file:\"$1\" is modified, reupload the whole file."
        else
            local blockinfo=($(grep "^md5-$startblk " "$1.tmp.syy" | awk '{print $2"\n"$3}'))
            while [[ -n "$blockinfo" ]]; do
                if [[ $startblk -eq 0 ]]; then
                    param="$param\"${blockinfo[0]}\""
                else
                    param="$param,\"${blockinfo[0]}\""
                fi
                startblk=$((startblk + ${blockinfo[1]}))
                blockinfo=($(grep "^md5-$startblk " "$1.tmp.syy" | awk '{print $2"\n"$3}'))
            done
			echo "$(date +'%Y-%m-%d %H:%M:%S') Resuming burst upload file \"$1\"."
        fi
    else
        echo "upload $2 $3" >> "$1.tmp.syy"
	fi
	while [[ $((startblk * 1048576)) -lt $3 ]]; do
		local retrycnt=0
		while [[ $retrycnt -le $retrytimes ]]; do
			[[ $retrycnt -gt 0 ]] && sleep $retrydelay's'
			if [[ $3 -gt $(((startblk + burstblocksize + 1) * 1048576)) ]]; then
				dd if="$1" of="$tmpdir/syncy.upfile.tmp" bs=1M skip=$startblk count=$upblkcount 2>/dev/null
			else
				upblkcount=$((burstblocksize + 1))
				dd if="$1" of="$tmpdir/syncy.upfile.tmp" bs=1M skip=$startblk count=$upblkcount 2>/dev/null
			fi
			local response=$(curl -sSLk --retry $retrytimes -A '' -F "file=@\"$tmpdir/syncy.upfile.tmp\"" "https://c.pcs.baidu.com/rest/2.0/pcs/file?method=upload&access_token=$access_token&type=tmpfile")
			local iserror=$(echo $response | sed -rn 's/.*\"(error).*/\1/p')
			if [[ -n "$iserror" || ${#response} -eq 0 ]]; then
				retrycnt=$((retrycnt + 1))
			else
				break
			fi
		done
		[[ ${#response} -eq 0 ]] && echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): Server not response on burst upload file to pcs." >> $syncyerrlog && return 1
		if [[ -n "$iserror" ]]; then
			echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): Burst upload file failed: $1,$response" >> $syncyerrlog
			rm "$tmpdir/syncy.upfile.tmp"
			return 1
		fi
		local blockmd5=$(echo $response | sed -rn 's/.*\"md5\":\"([0-9a-zA-Z]+)\".*/\1/p')
		echo "md5-$startblk $blockmd5 $upblkcount" >> "$1.tmp.syy"
		if [[ $startblk -eq 0 ]]; then
			param="$param\"$blockmd5\""
		else
			param="$param,\"$blockmd5\""
		fi
		startblk=$((startblk + upblkcount))
		rm "$tmpdir/syncy.upfile.tmp"
	done
	param="$param]}"
    encodeUrl "$4"
	local retrycnt=0
	while [[ $retrycnt -le $retrytimes ]]; do
		[[ $retrycnt -gt 0 ]] && sleep $retrydelay's'
		local response=$(curl -sSLk --retry $retrytimes -A '' -F "param=$param" "https://pcs.baidu.com/rest/2.0/pcs/file?method=createsuperfile&access_token=$access_token&path=$encoded_str&ondup=$6")
		local iserror=$(echo $response | sed -rn 's/.*\"(error).*/\1/p')
		if [[ -n "$iserror" || ${#response} -eq 0 ]]; then
			retrycnt=$((retrycnt + 1))
		else
			break
		fi
	done
	[[ ${#response} -eq 0 ]] && echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): Server not response on create superfile." >> $syncyerrlog && return 1
	[[ -n "$iserror" ]] && echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): Create superfile failed: $1,$response" >> $syncyerrlog && return 1
	rm "$1.tmp.syy"
	local rsize=$(echo "$response" | sed -rn 's/.*\"size\":([0-9]+),.*/\1/p')
	local rmd5=$(echo "$response" | sed -rn 's/.*\"md5\":\"([^"]+)\".*/\1/p')
    if [[ -z "$rmd5" || -z "$rsize" || $rsize -ne $3 ]]; then
        echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): Burst upload file failed: $1,$response." >> $syncyerrlog
        deletePcsFile "$4" "s"
        return 1
    fi
	echo "$rmd5 $2 $3 $5" >> $syncydb
	echo "$(date +'%Y-%m-%d %H:%M:%S') Burst upload file \"$1\" completed."
	return 0
}

downloadPcsFile() {
    local saddr=0
    local bkcnt=0
    if [[ -e "$4.tmp.syy" ]]; then
        if [[ $(sed -n '1p' "$4.tmp.syy") != "download $2 $3" ]]; then
            echo "download $2 $3" > "$4.tmp.syy"
			echo "$(date +'%Y-%m-%d %H:%M:%S') Remote file:\"$1\" is modified, redownload the whole file."
            rm -f "$4"
        else
            bkcnt=$(grep "dlinfo" "$4.tmp.syy" | awk '{print $2}')
            saddr=$(grep "dlinfo" "$4.tmp.syy" | awk '{print $3}')
			echo "$(date +'%Y-%m-%d %H:%M:%S') Resuming download file \"$4\"."
        fi
    else
        echo "download $2 $3" >> "$4.tmp.syy"
    fi
    encodeUrl "$1"
	if [[ 1 = 1 ]]; then
		local retrycnt=0
		while [[ $retrycnt -le $retrytimes ]]; do
			[[ $retrycnt -gt 0 ]] && sleep $retrydelay's'
			if [[ -e "$4" ]]; then
				saddr=$(ls -l "$4" | awk '{print $5}')
				curl -sSLk -R --retry $retrytimes -C $saddr -Y 1 -y 60 -A '' -o "$4" "https://d.pcs.baidu.com/rest/2.0/pcs/file?method=download&access_token=$access_token&path=$encoded_str"
			else
				touch "$4"
				curl -sSLk -R --retry $retrytimes -Y 1 -y 60 -A '' -o "$4" "https://d.pcs.baidu.com/rest/2.0/pcs/file?method=download&access_token=$access_token&path=$encoded_str"
			fi
			if [[ $(ls -l "$4" | awk '{print $5}') -ne $3 ]]; then
				retrycnt=$((retrycnt + 1))
				rm -f "$4"
			else
				break
			fi
		done
	else
		while [[ $saddr -lt $3 ]]; do
			if [[ $((dlblocksize * 1048576 + saddr)) -ge $3 ]]; then
				local eaddr=$(($3 - 1))
			else
				local eaddr=$((dlblocksize * 1048576 + saddr -1))
			fi
			local retrycnt=0
			while [[ $retrycnt -le $retrytimes ]]; do
				[[ $retrycnt -gt 0 ]] && sleep $retrydelay's'
				curl -sSLk --retry $retrytimes --range "$saddr-$eaddr" -A '' -o "$tmpdir/syncy.dlfile.tmp" "https://d.pcs.baidu.com/rest/2.0/pcs/file?method=download&access_token=$access_token&path=$encoded_str"
				local tmpsize=$(ls -l "$tmpdir/syncy.dlfile.tmp" | awk '{print $5}')
				if [[ $tmpsize -ne $((eaddr - saddr + 1)) ]]; then
					retrycnt=$((retrycnt + 1))
					rm -f "$tmpdir/syncy.dlfile.tmp"
				else
					break
				fi
			done
			if [[ $tmpsize -ne $((eaddr - saddr + 1)) ]]; then
			   echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): Download file failed: \"$4\"." >> $syncyerrlog
			   rm -f "$tmpdir/syncy.dlfile.tmp"
			   return 1
			fi
			dd if="$tmpdir/syncy.dlfile.tmp" of="$4" bs=1M seek=$bkcnt count=$dlblocksize > /dev/null 2>&1
			bkcnt=$((bkcnt + dlblocksize))
			saddr=$((eaddr + 1))
			echo "dlinfo $bkcnt $saddr" > "$4.tmp.syy"
			rm -f "$tmpdir/syncy.dlfile.tmp"
		done
	fi
    local lmeta=($(ls -l --time-style=+"%s" "$4" | awk '{print $6"\n"$5}'))
    rm "$4.tmp.syy"
    if [[ ${lmeta[1]} -ne $3 ]]; then
        echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): Download file failed: \"$4\"." >> $syncyerrlog
        rm "$4"
        return 1
    fi
    echo "$2 ${lmeta[0]} ${lmeta[1]} $5" >> $syncydb
    echo "$(date +'%Y-%m-%d %H:%M:%S') Download file \"$4\" completed."
    return 0
}

deletePcsFile() {
    encodeUrl "$1"
	local retrycnt=0
	while [[ $retrycnt -le $retrytimes ]]; do
		[[ $retrycnt -gt 0 ]] && sleep $retrydelay's'
		local response=$(curl -sSLk --retry $retrytimes -A '' "https://pcs.baidu.com/rest/2.0/pcs/file?method=delete&access_token=$access_token&path=$encoded_str")
		local iserror=$(echo "$response" | sed -rn 's/.*\"(error).*/\1/p')
		if [[ -n "$iserror" || ${#response} -eq 0 ]]; then
			retrycnt=$((retrycnt + 1))
		else
			break
		fi
	done
	[[ ${#response} -eq 0 ]] && echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): Server not response on delete pcs files." >> $syncyerrlog && return 1
	[[ -n "$iserror" ]] && echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): Delete remote file failed: $1,$response." >> $syncyerrlog && return 1
	[[ $# -eq 1 ]] && echo "$(date +'%Y-%m-%d %H:%M:%S') Delete remote file or directory \"$1\" completed."
	return 0
}
movePcsFile() {
    encodeUrl "$1"
	local fromstr=$encoded_str
	encodeUrl "$2"
	local retrycnt=0
	while [[ $retrycnt -le $retrytimes ]]; do
		[[ $retrycnt -gt 0 ]] && sleep $retrydelay's'
		local response=$(curl -sSLk --retry $retrytimes -A '' "https://pcs.baidu.com/rest/2.0/pcs/file?method=move&access_token=$access_token&from=$fromstr&to=$encoded_str")
		local iserror=$(echo "$response" | sed -rn 's/.*\"(error).*/\1/p')
		if [[ -n "$iserror" || ${#response} -eq 0 ]]; then
			retrycnt=$((retrycnt + 1))
		else
			break
		fi
	done
	[[ ${#response} -eq 0 ]] && echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): Server not response on move pcs files." >> $syncyerrlog && return 1
	[[ -n "$iserror" ]] && echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): Move remote file or directory \"$1\" to \"$2\" failed: ." >> $syncyerrlog && return 1
	echo "$(date +'%Y-%m-%d %H:%M:%S') Move remote file or directory \"$1\" to \"$2\" completed."
	return 0
}
checkPcsPath() {
	if [[ $((${#1} + ${#2})) -ge 999 ]]; then
		echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): Length of PCS path($1/$2) must less than 1000, skip upload." >> $syncyerrlog
		return 1
	fi
	if [[ ${2:$((${#2} -1)):1} = "." || $(expr index "$2" '\?|"<>:*') -ne 0 ]]; then
		echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): PCS path($1/$2) is invalid, please check whether special characters exists in the path, skip upload." >> $syncyerrlog
		return 1
	fi
	return 0
}
checkAndCreatePCSdir() {
    encodeUrl "$1"
	local retrycnt=0
	while [[ $retrycnt -le $retrytimes ]]; do
		[[ $retrycnt -gt 0 ]] && sleep $retrydelay's'
		local response=$(curl -X GET -sSLk --retry $retrytimes -A '' "https://c.pcs.baidu.com/rest/2.0/pcs/file?method=meta&access_token=$access_token&path=$encoded_str")
		local iserror=$(echo $response | sed -rn 's/.*\"(error).*/\1/p')
		errcode=$(echo $response | sed -rn 's/.*\"error_code\":([0-9]+),.*/\1/p')
		if [[( -n "$iserror" && $errcode -ne 31066 ) || ${#response} -eq 0 ]]; then
			retrycnt=$((retrycnt + 1))
		else
			break
		fi
	done
	[[ ${#response} -eq 0 ]] && echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): Server not response on check pcs directory." >> $syncyerrlog && return 1
	if [[ -n "$iserror" && $errcode -eq 31066 ]]; then
		retrycnt=0
		while [[ $retrycnt -le $retrytimes ]]; do
		[[ $retrycnt -gt 0 ]] && sleep $retrydelay's'
			response=$(curl -sSLk --retry $retrytimes -A '' "https://pcs.baidu.com/rest/2.0/pcs/file?method=mkdir&access_token=$access_token&path=$encoded_str")
			iserror=$(echo "$response" | sed -rn 's/.*\"(error).*/\1/p')
			if [[ -n "$iserror" || ${#response} -eq 0 ]]; then
				retrycnt=$((retrycnt + 1))
			else
				break
			fi
		done
		[[ ${#response} -eq 0 ]] && echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): Server not response on create pcs directory." >> $syncyerrlog && return 1
        [[ -n "$iserror" ]] && echo "$(date +'%Y-%m-%d %H:%M:%S') Remote directory \"$1\" is not exist and create failed. " && return 1
    fi
	return 0
}
compressData() {
    local fn=
	local idx=
	for fn in $(ls -l --time-style=+"%s" "$1" | awk '{for (i=1; i<5; i++){$i=""} print $0}'); do
		[[ ${#fn} -lt 10 ]] && continue
		fn=${fn#"    "}
		fn=${fn/" "/$'\n'}
		fn=(${fn/" "/$'\n'})
        if [[ -d "$1/${fn[2]}" ]]; then
            compressData "$1/${fn[2]}"
        elif [[ $bufferMemory = "on" ]]; then
			local prk="${fn[1]} ${fn[0]} "$(echo "${1:$basedirlen}/${fn[2]}" | md5sum | cut -d ' ' -f1)
			for idx in ${!syncInfo[@]}; do
                if [[ "${syncInfo[$idx]:33}" = "$prk" ]]; then
                    echo "${syncInfo[$idx]}" >> $syncydbtmp
                    unset syncInfo[$idx]
                    break
                fi
            done
        else
            local prk="${fn[1]} ${fn[0]} "$(echo "${1:$basedirlen}/${fn[2]}" | md5sum | cut -d ' ' -f1)
            local syncl=$(grep ".* $prk$" $syncydb)
            [[ -n "$syncl" ]] && echo "$syncl" >> $syncydbtmp
        fi
	done
	return 0
}
startCompress() {
    if [[ $# -eq 0 ]]; then
		local mpath=$syncpath
		echo "$(date +'%Y-%m-%d %H:%M:%S') Start compress sync data."
	else
		local mpath=$1
    fi
	local ipath=
	for ipath in ${mpath//;/$'\n'}
	do
        [[ -z "$ipath" ]] && continue
        local localdir=$(echo "$ipath" | cut -d ':' -f1)
		local synctype=$(echo "$ipath" | cut -d ':' -f3)
		[[ $(expr index "$synctype" '4sS') -ne 0 && $# -eq 0 ]] && continue
        syncydb="$localdir/.syncy.info.db"
		basedirlen=${#localdir}
        if [[ -e "$syncydb" ]]; then
            syncydbtmp="$localdir/.syncy.info.db1"
            [[ -e "$syncydbtmp" ]] && rm -f "$syncydbtmp"
            [[ $bufferMemory = "on" ]] && syncInfo=($(cat $syncydb))
            compressData "$localdir"
            mv -f "$syncydbtmp" "$syncydb"
        fi
		basedirlen=0
	done
	if [[ $# -eq 0 ]]; then
		compress_date=$(date +%s)
		synctotal=0
		save_value compress_date $compress_date
		save_value synctotal $synctotal
		echo "$(date +'%Y-%m-%d %H:%M:%S') Compress sync data complete."
	fi
}
checkEliminate() {
    [[ "${1:$((${#1}-8))}" = ".tmp.syy" ]] && return 1
	local idx=
	for idx in ${!eliminate_files[@]}; do
		local elimi=$(echo "$1" | grep "${eliminate_files[$idx]}")
		if [[ -n "$elimi" ]]; then
			return 1
			break
		fi
	done
    return 0
}
checkSyncStatus() {
	local idx=
    if [[ $bufferMemory = "on" ]]; then
        if [[ "$1" = "*" ]]; then
            for idx in ${!syncInfo[@]}; do
                local issync=$(echo ${syncInfo[$idx]} | awk '{print $2" "$3" "$4}')
				if [[ "$issync" = "$2 $3 $4" ]]; then
                    unset syncInfo[$idx]
                    return 1
                fi
            done
        elif [[ "$2" = "*" ]]; then
            for idx in ${!syncInfo[@]}; do
                local issync=$(echo ${syncInfo[$idx]} | awk '{print $1" "$3" "$4}')
                if [[ "$issync" = "$1 $3 $4" ]]; then
                    unset syncInfo[$idx]
                    return 1
                fi
            done
        else
            for idx in ${!syncInfo[@]}; do
                if [[ "${syncInfo[$idx]}" = "$1 $2 $3 $4" ]]; then
                    unset syncInfo[$idx]
                    return 1
                fi
            done
        fi
    else
        if [[ "$1" = "*" ]]; then
			local issync=$(grep -c ".* $2 $3 $4$" $syncydb)
		elif [[ "$2" = "*" ]]; then
			local issync=$(grep -c "^$1 .* $3 $4$" $syncydb)
		else
			local issync=$(grep -c "^$1 $2 $3 $4$" $syncydb)
        fi
		[[ $issync -ne 0 ]] && return 1
    fi
    return 0
}
unicodeDecode() {
	response_str=${response_str//\\\///}
	local idx=$(expr index "$response_str" '\')
	[[ $idx -eq 0 ]] && return 0
	local uchar=${response_str:($idx - 1):6}
	while [[ ${uchar:0:2} = '\u' ]]; do
		local saddr='$'$((16#${uchar:5:1} + 2))
        local chnchar=$(grep "^${uchar:2:3}0 .*" $unicodetable".syy" | awk "{print $saddr}")
		if [[ -z "$chnchar" ]]; then
            local chncharline=$(grep "^${uchar:2:3}0 .*" $unicodetable)
		    chnchar=$(echo "$chncharline" | awk "{print $saddr}")
            if [[ -z "$chnchar" || "$chnchar" = "null" ]]; then
                echo "$(date +'%Y-%m-%d %H:%M:%S') Decode failed($uchar), there is not this character's code in unicodetable."
                return 1
            else
                echo "$chncharline" >> $unicodetable".syy"
            fi
        elif [[ "$chnchar" = "null" ]]; then
			echo "$(date +'%Y-%m-%d %H:%M:%S') Decode failed($uchar), there is not this character's code in unicodetable."
			return 1
		fi
		response_str=${response_str//"$uchar"/"$chnchar"}
		idx=$(expr index "$response_str" '\')
		[[ $idx -eq 0 ]] && break
		uchar=${response_str:($idx - 1):6}
	done
	return 0
}
uploadPath() {
	local lfn=
	for lfn in $(ls -1 "$1"); do
        checkEliminate "$1/$lfn"
        [[ $? = 1 ]] && continue
        checkPcsPath "$2" "$lfn"
        [[ $? = 1 ]] && continue
        if [[ -d "$1/$lfn" ]]; then
            uploadPath "$1/$lfn" "$2/$lfn"
        else
            local lmeta=($(ls -l --time-style=+"%s" "$1/$lfn" | awk '{print $6"\n"$5}'))
            local fnmd5=$(echo  "${1:$basedirlen}/$lfn" | md5sum | cut -d ' ' -f1)
            checkSyncStatus "*" "${lmeta[0]}" "${lmeta[1]}" "$fnmd5"
            if [[ $? -eq 0 ]]; then
                if [[ -e "$1/$lfn.tmp.syy" ]]; then
					burstUploadFile2Pcs "$1/$lfn" "${lmeta[0]}" "${lmeta[1]}" "$2/$lfn" "$fnmd5" "${ondup/rename/newcopy}"
                else
                    checkPcsPath "$2/$lfn"
					if [[ $? -eq 0 ]]; then
						rapidUploadFile2Pcs "$1/$lfn" "${lmeta[0]}" "${lmeta[1]}" "$2/$lfn" "$fnmd5" "${ondup/rename/newcopy}"
					else
						continue
					fi
                fi
                if [[ $? -eq 0 ]]; then
                    synccount=$((synccount + 1))
                else
                    failcount=$((failcount + 1))
                fi
            fi
        fi
    done
}
uploadPathPlus() {
    local startIdx=0
    getPcsFileList "$2" "$startIdx" "$listNum"
    local result=$?
	[[ $result -ne 0 && $errcode -ne 31066 ]] && return 1
    local lfnlist=($(ls -1 "$1"))
	local rfn=
	local idx=
    while [[ $result -eq 0 ]]; do
		[[ ${#response_str} -lt 600 && "${response_str/'"path"'/}" = "$response_str" ]] && break
		local rfnlist=${response_str//'},{'/"}"$'\n'"{"}
        for rfn in $rfnlist; do
            local fnfullpath=$(echo "$rfn" | sed -rn 's/.*\"path\":\"([^"]+)\",.*/\1/p')
			local fnname="${fnfullpath##*/}"
            checkEliminate "$1/$fnname"
            [[ $? = 1 ]] && continue
            if [[ -e "$1/$fnname" ]]; then
                for idx in ${!lfnlist[@]}; do
                    if [[ "${lfnlist[$idx]}" = "$fnname" ]]; then
                        unset lfnlist[$idx]
                        break
                    fi
                done
			else
				continue
			fi
            local isdir=$(echo "$rfn" | sed -rn 's/.*\"isdir\":([0-1]{1}).*/\1/p')
            if ([[ $isdir -eq 1 && -f "$1/$fnname" ]] || [[ $isdir -eq 0 && -d "$1/$fnname" ]]); then
                if [[ "$ondup" = "rename" ]]; then
                    if [[ $(expr index "$fnname" '.') -eq 0 ]]; then
                        local fnnametmp="$fnname""_old_""$(date +'%Y%m%d%H%M%S')"
                    else
                        local fnnametmp="${fnname%.*}""_old_""$(date +'%Y%m%d%H%M%S')"".""${fnname##*.}"
                    fi
                    if [[ $((${#2} + ${#fnnametmp})) -ge 999 ]]; then
						echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): Rename faild, the length of PCS path($2/$fnname) must less than 1000, skip upload \"$1/$fnname\"." >> $syncyerrlog
                        continue
                    fi
                    movePcsFile "$2/$fnname" "$2/$fnnametmp"
                    if [[ $? -eq 1 ]]; then
                        echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): Rename \"$2/$fnname\" failed, skip upload \"$1/$fnname\"." >> $syncyerrlog
                        continue
                    fi
                else
                    deletePcsFile "$2/$fnname" "s"
                fi
				if [[ -d "$1/$fnname" ]]; then
					uploadPathPlus "$1/$fnname" "$2/$fnname"
					continue
				else
					local lmeta=($(ls -l --time-style=+"%s" "$1/$fnname" | awk '{print $6"\n"$5}'))
					local fnmd5=$(echo  "${1:$basedirlen}/$fnname" | md5sum | cut -d ' ' -f1)
                    rapidUploadFile2Pcs "$1/$fnname" "${lmeta[0]}" "${lmeta[1]}" "$2/$fnname" "$fnmd5" "overwrite"
				fi
            elif [[ $isdir -eq 1 ]]; then
				uploadPathPlus "$1/$fnname" "$2/$fnname"
				continue
            else
                local lmeta=($(ls -l --time-style=+"%s" "$1/$fnname" | awk '{print $6"\n"$5}'))
                local fnmd5=$(echo  "${1:$basedirlen}/$fnname" | md5sum | cut -d ' ' -f1)
                local rmd5=$(echo "$rfn" | sed -rn 's/.*\"md5\":\"([^"]+)\".*/\1/p')
                local rsize=$(echo "$rfn" | sed -rn 's/.*\"size\":([0-9]+),.*/\1/p')
				if [[ ${lmeta[1]} -eq $rsize ]]; then
                    checkSyncStatus "$rmd5" "${lmeta[0]}" "${lmeta[1]}" "$fnmd5"
                    [[ $? -eq 1 ]] && continue
                fi
                if [[ "$ondup" = "rename" ]]; then
                    if [[ $(expr index "$fnname" '.') -eq 0 ]]; then
                        local fnnametmp="$fnname""_old_""$(date +'%Y%m%d%H%M%S')"
                    else
                        local fnnametmp="${fnname%.*}""_old_""$(date +'%Y%m%d%H%M%S')"".""${fnname##*.}"
                    fi
                    if [[ $((${#2} + ${#fnnametmp})) -ge 999 ]]; then
						echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): Rename faild, the length of PCS path($2/$fnname) must less than 1000, skip upload \"$1/$fnname\"." >> $syncyerrlog
                        continue
                    fi
                    movePcsFile "$2/$fnname" "$2/$fnnametmp"
                    if [[ $? -eq 1 ]]; then
                        echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): Rename \"$2/$fnname\" failed, skip upload \"$1/$fnname\"." >> $syncyerrlog
                        continue
                    fi
                else
                    deletePcsFile "$2/$fnname" "s"
                fi
                if [[ -e "$1/$fnname.tmp.syy" ]]; then
					burstUploadFile2Pcs "$1/$fnname" "${lmeta[0]}" "${lmeta[1]}" "$2/$fnname" "$fnmd5" "overwrite"
                else
                    rapidUploadFile2Pcs "$1/$fnname" "${lmeta[0]}" "${lmeta[1]}" "$2/$fnname" "$fnmd5" "overwrite"
                fi
            fi
			if [[ $? -eq 0 ]]; then
				synccount=$((synccount + 1))
			else
				failcount=$((failcount + 1))
			fi
        done
		local rfnNum=$(echo "$rfnlist" | wc -l)
		[[ $rfnNum -lt $listNum ]] && break
        startIdx=$((startIdx + listNum))
        getPcsFileList "$2" "$startIdx" "$((startIdx + listNum))"
        result=$?
		if [[ $result -ne 0 ]]; then
			unset lfnlist
			return 1
		fi
    done
    for idx in ${!lfnlist[@]}; do
		[[ -z "${lfnlist[$idx]}" ]] && continue
		checkEliminate "$1/${lfnlist[$idx]}"
        [[ $? = 1 ]] && continue
        checkPcsPath "$2" "${lfnlist[$idx]}"
        [[ $? = 1 ]] && continue
        if [[ -d "$1/${lfnlist[$idx]}" ]]; then
            uploadPathPlus "$1/${lfnlist[$idx]}" "$2/${lfnlist[$idx]}"
        elif [[ -f "$1/${lfnlist[$idx]}" ]]; then
			local lmeta=($(ls -l --time-style=+"%s" "$1/${lfnlist[$idx]}" | awk '{print $6"\n"$5}'))
            local fnmd5=$(echo  "${1:$basedirlen}/${lfnlist[$idx]}" | md5sum | cut -d ' ' -f1)
            if [[ -e "$1/${lfnlist[$idx]}.tmp.syy" ]]; then
				burstUploadFile2Pcs "$1/${lfnlist[$idx]}" "${lmeta[0]}" "${lmeta[1]}" "$2/${lfnlist[$idx]}" "$fnmd5" "overwrite"
            else
                rapidUploadFile2Pcs "$1/${lfnlist[$idx]}" "${lmeta[0]}" "${lmeta[1]}" "$2/${lfnlist[$idx]}" "$fnmd5" "overwrite"
            fi
            if [[ $? -eq 0 ]]; then
                synccount=$((synccount + 1))
            else
                failcount=$((failcount + 1))
            fi
        fi
    done
	return 0
}
downloadPath() {
    local startIdx=0
    getPcsFileList "$2" "$startIdx" "$listNum"
    local result=$?
    [[ $result -ne 0 ]] && return 1
	local rfn=
    while [[ $result -eq 0 ]]; do
		[[ ${#response_str} -lt 600 && "${response_str/'"path"'/}" = "$response_str" ]] && break
		local rfnlist=${response_str//'},{'/"}"$'\n'"{"}
        for rfn in $rfnlist; do
            local fnfullpath=$(echo "$rfn" | sed -rn 's/.*\"path\":\"([^"]+)\",.*/\1/p')
            local fnname="${fnfullpath##*/}"
            checkEliminate "$fnfullpath"
            [[ $? = 1 ]] && continue
            local isdir=$(echo "$rfn" | sed -rn 's/.*\"isdir\":([0-1]{1}).*/\1/p')
            if [[ $isdir = 1 ]]; then
                if [[ -e "$1/$fnname" && -f "$1/$fnname" ]]; then
                    if [[ "$ondup" = "rename" ]]; then
                        if [[ $(expr index "$fnname" '.') -eq 0 ]]; then
                            local fnnametmp="$fnname""_old_""$(date +'%Y%m%d%H%M%S')"
                        else
                            local fnnametmp="${fnname%.*}""_old_""$(date +'%Y%m%d%H%M%S')"".""${fnname##*.}"
                        fi
                        mv -f "$1/$fnname" "$1/$fnnametmp"
                    else
                        rm -f "$1/$fnname"
                    fi
                fi
                [[ ! -e "$1/$fnname" ]] && mkdir "$1/$fnname"
                downloadPath "$1/$fnname" "$2/$fnname"
            else
				local rmd5=$(echo "$rfn" | sed -rn 's/.*\"md5\":\"([^"]+)\".*/\1/p')
				local rsize=$(echo "$rfn" | sed -rn 's/.*\"size\":([0-9]+),.*/\1/p')
                local fnmd5=$(echo  "${1:$basedirlen}/$fnname" | md5sum | cut -d ' ' -f1)
                if [[ -e "$1/$fnname.tmp.syy" ]]; then
                    downloadPcsFile "$2/$fnname" "$rmd5" "$rsize" "$1/$fnname" "$fnmd5"
                else
					checkSyncStatus "$rmd5" "*" "$rsize" "$fnmd5"
					[[ $? -eq 1 ]] && continue
					if [[ -e "$1/$fnname" && "$ondup" = "rename" ]]; then
						if [[ $(expr index "$fnname" '.') -eq 0 ]]; then
							local fnnametmp="$fnname""_old_""$(date +'%Y%m%d%H%M%S')"
						else
							local fnnametmp="${fnname%.*}""_old_""$(date +'%Y%m%d%H%M%S')"".""${fnname##*.}"
						fi
						mv -f "$1/$fnname" "$1/$fnnametmp"
					elif [[ -e "$1/$fnname" ]]; then
						rm -rf "$1/$fnname"
					fi
                    downloadPcsFile "$2/$fnname" "$rmd5" "$rsize" "$1/$fnname" "$fnmd5"
                fi
                if [[ $? -eq 0 ]]; then
                    synccount=$((synccount + 1))
                else
                    failcount=$((failcount + 1))
                fi
            fi
        done
		local rfnNum=$(echo "$rfnlist" | wc -l)
		[[ $rfnNum -lt $listNum ]] && break
        startIdx=$((startIdx + listNum))
        getPcsFileList "$2" "$startIdx" "$((startIdx + listNum))"
        result=$?
		[[ $result -ne 0 ]] && return 1
    done
	return 0
}
downloadPathPlus() {
    local startIdx=0
    getPcsFileList "$2" "$startIdx" "$listNum"
    local result=$?
    [[ $result -ne 0 ]] && return 1
	local rfn=
    while [[ $result -eq 0 ]]; do
		[[ ${#response_str} -lt 600 && "${response_str/'"path"'/}" = "$response_str" ]] && break
		local rfnlist=${response_str//'},{'/"}"$'\n'"{"}
        for rfn in $rfnlist; do
            local fnfullpath=$(echo "$rfn" | sed -rn 's/.*\"path\":\"([^"]+)\",.*/\1/p')
            local fnname="${fnfullpath##*/}"
            checkEliminate "$fnfullpath"
            [[ $? = 1 ]] && continue
            local isdir=$(echo "$rfn" | sed -rn 's/.*\"isdir\":([0-1]{1}).*/\1/p')
            if [[ $isdir = 1 ]]; then
                if [[ -e "$1/$fnname" && -f "$1/$fnname" ]]; then
                    if [[ "$ondup" = "rename" ]]; then
                        if [[ $(expr index "$fnname" '.') -eq 0 ]]; then
                            local fnnametmp="$fnname""_old_""$(date +'%Y%m%d%H%M%S')"
                        else
                            local fnnametmp="${fnname%.*}""_old_""$(date +'%Y%m%d%H%M%S')"".""${fnname##*.}"
                        fi
                        mv -f "$1/$fnname" "$1/$fnnametmp"
                    else
                        rm -f "$1/$fnname"
                    fi
                fi
                [[ ! -e "$1/$fnname" ]] && mkdir "$1/$fnname"
                downloadPathPlus "$1/$fnname" "$2/$fnname"
            else
                local fnmd5=$(echo  "${1:$basedirlen}/$fnname" | md5sum | cut -d ' ' -f1)
				local rmd5=$(echo "$rfn" | sed -rn 's/.*\"md5\":\"([^"]+)\".*/\1/p')
				local rsize=$(echo "$rfn" | sed -rn 's/.*\"size\":([0-9]+),.*/\1/p')
                if [[ -e "$1/$fnname.tmp.syy" ]]; then
                    downloadPcsFile "$2/$fnname" "$rmd5" "$rsize" "$1/$fnname" "$fnmd5"
                elif [[ -e "$1/$fnname" ]]; then
                    local lmeta=($(ls -l --time-style=+"%s" "$1/$fnname" | awk '{print $6"\n"$5}'))
                    checkSyncStatus "$rmd5" "${lmeta[0]}" "${lmeta[1]}" "$fnmd5"
                    [[ $? -eq 1 ]] && continue
                    if [[ "$ondup" = "rename" ]]; then
                        if [[ $(expr index "$fnname" '.') -eq 0 ]]; then
                            local fnnametmp="$fnname""_old_""$(date +'%Y%m%d%H%M%S')"
                        else
                            local fnnametmp="${fnname%.*}""_old_""$(date +'%Y%m%d%H%M%S')"".""${fnname##*.}"
                        fi
                        mv -f "$1/$fnname" "$1/$fnnametmp"
                    else
                        rm -rf "$1/$fnname"
                    fi
                    downloadPcsFile "$2/$fnname" "$rmd5" "$rsize" "$1/$fnname" "$fnmd5"
                else
                    downloadPcsFile "$2/$fnname" "$rmd5" "$rsize" "$1/$fnname" "$fnmd5"
                fi
                if [[ $? -eq 0 ]]; then
                    synccount=$((synccount + 1))
                else
                    failcount=$((failcount + 1))
                fi
            fi
		done
		local rfnNum=$(echo "$rfnlist" | wc -l)
		[[ $rfnNum -lt $listNum ]] && break
        startIdx=$((startIdx + listNum))
        getPcsFileList "$2" "$startIdx" "$((startIdx + listNum))"
        result=$?
		[[ $result -ne 0 ]] && return 1
    done
	return 0
}
syncPath() {
    local startIdx=0
    getPcsFileList "$2" "$startIdx" "$listNum"
    local result=$?
    [[ $result -ne 0 && $errcode -ne 31066 ]] && return 1
	local lfnlist=($(ls -1 "$1"))
	local idx=
	local rfn=
    while [[ $result -eq 0 ]]; do
		[[ ${#response_str} -lt 600 && "${response_str/'"path"'/}" = "$response_str" ]] && break
		local rfnlist=${response_str//'},{'/"}"$'\n'"{"}
        for rfn in $rfnlist; do
            local fnfullpath=$(echo "$rfn" | sed -rn 's/.*\"path\":\"([^"]+)\",.*/\1/p')
            local fnname="${fnfullpath##*/}"
			checkEliminate "$2/$fnname"
            [[ $? = 1 ]] && continue
			if [[ -e "$1/$fnname" ]]; then
				for idx in ${!lfnlist[@]}; do
					if [[ "${lfnlist[$idx]}" = "$fnname" ]]; then
						unset lfnlist[$idx]
						break
					fi
				done
			fi
            local isdir=$(echo "$rfn" | sed -rn 's/.*\"isdir\":([0-1]{1}).*/\1/p')
			local rmtime=$(echo "$rfn" | sed -rn 's/.*\"mtime\":([0-9]+).*/\1/p')
            if [[ $isdir = 1 ]]; then
                if [[ -e "$1/$fnname" && -f "$1/$fnname" ]]; then
					local fnmd5=$(echo  "${1:$basedirlen}/$fnname" | md5sum | cut -d ' ' -f1)
                    local lmeta=($(ls -l --time-style=+"%s" "$1/$fnname" | awk '{print $6"\n"$5}'))
                    checkSyncStatus "*" "${lmeta[0]}" "${lmeta[1]}" "$fnmd5"
                    if [[ $? -eq 1 ]]; then
                        rm -f "$1/$fnname"
                        downloadPathPlus "$1/$fnname" "$2/$fnname"
						continue
                    elif [[ $rmtime -gt ${lmeta[0]} ]]; then
                        rm -f "$1/$fnname"
                        downloadPathPlus "$1/$fnname" "$2/$fnname"
						continue
					else
                        deletePcsFile "$2/$fnname" "s"
                        rapidUploadFile2Pcs "$1/$fnname" "${lmeta[0]}" "${lmeta[1]}" "$2/$fnname" "$fnmd5" "overwrite"
                    fi
                else
                    [[ ! -e "$1/$fnname" ]] && mkdir "$1/$fnname"
                    syncPath "$1/$fnname" "$2/$fnname"
					continue
                fi
            else
                local rmd5=$(echo "$rfn" | sed -rn 's/.*\"md5\":\"([^"]+)\".*/\1/p')
                local fnmd5=$(echo  "${1:$basedirlen}/$fnname" | md5sum | cut -d ' ' -f1)
				local rsize=$(echo "$rfn" | sed -rn 's/.*\"size\":([0-9]+),.*/\1/p')
                if [[ -e "$1/$fnname" && -d "$1/$fnname" ]]; then
                    checkSyncStatus "$rmd5" "*" "$rsize" "$fnmd5"
                    if [[ $? -eq 1 ]]; then
						deletePcsFile "$2/$fnname" "s"
						uploadPathPlus "$1/$fnname" "$2/$fnname"
						if [[ $? -eq 0 ]]; then
							synccount=$((synccount + 1))
						else
							failcount=$((failcount + 1))
						fi
						continue
					else
						local lmtime=$(ls -l --time-style=+"%s" "$1/$fnname" | awk '{print $6}')
						if [[ $rmtime -gt $lmtime ]]; then
							rm -rf "$1/$fnname"
							downloadPcsFile "$2/$fnname" "$rmd5" "$rsize" "$1/$fnname" "$fnmd5"
						else
							deletePcsFile "$2/$fnname" "s"
							uploadPathPlus "$1/$fnname" "$2/$fnname"
							if [[ $? -eq 0 ]]; then
								synccount=$((synccount + 1))
							else
								failcount=$((failcount + 1))
							fi
							continue
						fi
					fi
                elif [[ -e "$1/$fnname" ]]; then
                    local lmeta=($(ls -l --time-style=+"%s" "$1/$fnname" | awk '{print $6"\n"$5}'))
                    if [[ $rsize -eq ${lmeta[1]} ]]; then
						checkSyncStatus "$rmd5" "${lmeta[0]}" "${lmeta[1]}" "$fnmd5"
						[[ $? -eq 1 ]] && continue
					fi
					checkSyncStatus "*" "${lmeta[0]}" "${lmeta[1]}" "$fnmd5"
					if [[ $? -eq 1 ]]; then
						rm -rf "$1/$fnname"
						downloadPcsFile "$2/$fnname" "$rmd5" "$rsize" "$1/$fnname" "$fnmd5"
						if [[ $? -eq 0 ]]; then
							synccount=$((synccount + 1))
						else
							failcount=$((failcount + 1))
						fi
						continue
					fi
					checkSyncStatus "$rmd5" "*" "$rsize" "$fnmd5"
					if [[ $? -eq 1 ]]; then
						deletePcsFile "$2/$fnname" "s"
						rapidUploadFile2Pcs "$1/$fnname" "${lmeta[0]}" "${lmeta[1]}" "$2/$fnname" "$fnmd5" "overwrite"
					elif [[ -e "$1/$fnname.tmp.syy"  ]]; then
						if [[ $(sed -n '1p' "$1.tmp.syy") = "download $rmd5 $rsize" ]]; then
							downloadPcsFile "$2/$fnname" "$rmd5" "$rsize" "$1/$fnname" "$fnmd5"
						else
							rm -f "$1/$fnname.tmp.syy"
							if [[ $rmtime -gt ${lmeta[0]} ]]; then
								rm -f "$1/$fnname"
								downloadPcsFile "$2/$fnname" "$rmd5" "$rsize" "$1/$fnname" "$fnmd5"
							else
								deletePcsFile "$2/$fnname" "s"
								rapidUploadFile2Pcs "$1/$fnname" "${lmeta[0]}" "${lmeta[1]}" "$2/$fnname" "$fnmd5" "overwrite"
							fi
						fi
					elif [[ $rmtime -gt ${lmeta[0]} ]]; then
						rm -f "$1/$fnname"
						downloadPcsFile "$2/$fnname" "$rmd5" "$rsize" "$1/$fnname" "$fnmd5"
					else
						deletePcsFile "$2/$fnname" "s"
						rapidUploadFile2Pcs "$1/$fnname" "${lmeta[0]}" "${lmeta[1]}" "$2/$fnname" "$fnmd5" "overwrite"
					fi
                else
					checkSyncStatus "$rmd5" "*" "$rsize" "$fnmd5"
					if [[ $? -eq 1 ]]; then
						deletePcsFile "$2/$fnname"
					else
						downloadPcsFile "$2/$fnname" "$rmd5" "$rsize" "$1/$fnname" "$fnmd5"
					fi
                fi
            fi
			if [[ $? -eq 0 ]]; then
				synccount=$((synccount + 1))
			else
				failcount=$((failcount + 1))
			fi
        done
		local rfnNum=$(echo "$rfnlist" | wc -l)
		[[ $rfnNum -lt $listNum ]] && break
        startIdx=$((startIdx + listNum))
        getPcsFileList "$2" "$startIdx" "$((startIdx + listNum))"
        result=$?
		if [[ $result -ne 0 ]]; then
			unset lfnlist
			return 1
		fi
    done
    for idx in ${!lfnlist[@]}; do
        [[ -z "${lfnlist[$idx]}" ]] && continue
		checkEliminate "$1/${lfnlist[$idx]}"
        [[ $? = 1 ]] && continue
        checkPcsPath "$2" "${lfnlist[$idx]}"
        [[ $? = 1 ]] && continue
        if [[ -d "$1/${lfnlist[$idx]}" ]]; then
            syncPath "$1/${lfnlist[$idx]}" "$2/${lfnlist[$idx]}"
			[[ $(ls -1 "$1/${lfnlist[$idx]}" | wc -l) -eq 0 ]] && rm -rf "$1/${lfnlist[$idx]}"
        elif [[ -f "$1/${lfnlist[$idx]}" ]]; then
            local lmeta=($(ls -l --time-style=+"%s" "$1/${lfnlist[$idx]}" | awk '{print $6"\n"$5}'))
            local fnmd5=$(echo  "${1:$basedirlen}/${lfnlist[$idx]}" | md5sum | cut -d ' ' -f1)
			checkSyncStatus "*" "${lmeta[0]}" "${lmeta[1]}" "$fnmd5"
			if [[ $? -eq 1 ]];then
				rm -f "$1/${lfnlist[$idx]}"
			elif [[ -e "$1/${lfnlist[$idx]}.tmp.syy" ]]; then
				if [[ $(sed -n '1p' "$1/${lfnlist[$idx]}.tmp.syy") = "upload ${lmeta[0]} ${lmeta[1]}" ]]; then
					burstUploadFile2Pcs "$1/${lfnlist[$idx]}" "${lmeta[0]}" "${lmeta[1]}" "$2/${lfnlist[$idx]}" "$fnmd5" "overwrite"
				else
					rm -f "$1/${lfnlist[$idx]}.tmp.syy"
					rapidUploadFile2Pcs "$1/${lfnlist[$idx]}" "${lmeta[0]}" "${lmeta[1]}" "$2/${lfnlist[$idx]}" "$fnmd5" "overwrite"
				fi
            else
                rapidUploadFile2Pcs "$1/${lfnlist[$idx]}" "${lmeta[0]}" "${lmeta[1]}" "$2/${lfnlist[$idx]}" "$fnmd5" "overwrite"
            fi
            if [[ $? -eq 0 ]]; then
                synccount=$((synccount + 1))
            else
                failcount=$((failcount + 1))
            fi
        fi
    done
	return 0
}
startSync() {
	getPcsQuota
    for ipath in ${syncpath//;/$'\n'}
	do
        [[ -z "$ipath" ]] && continue
		synccount=0
		failcount=0
		errorcount=0
		echo "$(date +'%Y-%m-%d %H:%M:%S') Start sync path: \"$ipath\"."
        local localdir=$(echo "$ipath" | cut -d ':' -f1)
        local remotedir=$(echo "$ipath" | cut -d ':' -f2)
        local synctype=$(echo "$ipath" | cut -d ':' -f3)
        local ckresult=$(echo "$pcsroot$remotedir" | sed -rn 's/^((\/[^/<>\|*?:" .\r\n\t]{1}[^/<>\|*?:"]+[^/<>\|*?:" .\r\n\t]{1})+)$/\1/p')
		local cklresult=$(echo "$localdir" | sed -rn 's/^((\/[^/<>\|*?:" .\r\n\t]{1}[^/<>\|*?:"]+[^/<>\|*?:" .\r\n\t]{1})+)$/\1/p')
        if [[ -z $ckresult || $ckresult != "$pcsroot$remotedir" ]]; then
            echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): Sync \"$ipath\" failed, remote directory error." >> $syncyerrlog
            continue
        fi
        if [[ -z $cklresult || $cklresult != "$localdir" ]]; then
            echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): Sync \"$ipath\" failed, local directory error." >> $syncyerrlog
            continue
        fi
        if [[ -n "$localdir" && -d "$localdir" ]]; then
            syncydb="$localdir/.syncy.info.db"
			[[ ! -e "$syncydb" ]] && touch "$syncydb"
            [[ $bufferMemory = "on" ]] && syncInfo=($(cat $syncydb))
			basedirlen=${#localdir}
			case "$synctype" in
                "0"|"u"|"U"|"upload")
                    uploadPath "$localdir" "$pcsroot$remotedir"
					synctotal=$((synctotal + synccount))
                 ;;
                "1"|"u+"|"U+"|"upload+")
                    uploadPathPlus "$localdir" "$pcsroot$remotedir"
					[[ $failcount -eq 0 && $errorcount -eq 0 ]] && startCompress "$ipath"
                 ;;
                "2"|"d"|"D"|"download")
                    downloadPath "$localdir" "$pcsroot$remotedir"
					synctotal=$((synctotal + synccount))
                 ;;
                "3"|"d+"|"D+"|"download+")
                    downloadPathPlus "$localdir" "$pcsroot$remotedir"
					[[ $failcount -eq 0 && $errorcount -eq 0 ]] && startCompress "$ipath"
                 ;;
                "4"|"s"|"S"|"sync")
                    syncPath "$localdir" "$pcsroot$remotedir"
					[[ $failcount -eq 0 && $errorcount -eq 0 ]] && startCompress "$ipath"
                 ;;
                *)
                    echo "Error: \"synctype\" is invalid, must set to [0 - 4]." >> $syncyerrlog
                    return 1
                 ;;
            esac
			basedirlen=0
        else
            echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): Sync \"$ipath\" failed, local directory is not exist or is normal file." >> $syncyerrlog
        fi
		if [[ $failcount -eq 0 && $errorcount -eq 0 ]]; then
			echo "$(date +'%Y-%m-%d %H:%M:%S') Sync path: \"$ipath\" complete, Success sync $synccount files."
		else
			echo "$(date +'%Y-%m-%d %H:%M:%S') Sync path: \"$ipath\" failed, $synccount files success,$failcount files failed,$errorcount errors occurred."
			echo "ERROR($(date +'%Y-%m-%d %H:%M:%S')): Sync path: \"$ipath\" failed, $synccount files success,$failcount files failed,$errorcount errors occurred." >> $syncyerrlog
		fi
	done
    save_value synctotal $synctotal
	getPcsQuota
}
initSyncy() {
    eliminate_files=(${eliminate_files//;/$'\n'})
	eliminate_files=(${eliminate_files//'.'/'\.'})
    eliminate_files=(${eliminate_files//'*'/'.*'})
    eliminate_files=(${eliminate_files//'?'/'.?'})
	local idx=
	for idx in ${!eliminate_files[@]}; do
        eliminate_files[$idx]='^'"${eliminate_files[$idx]}"'$'
	done
}
testChinese() {
    response_str="\u4e2d\u6587\u8f6c\u7801\u6d4b\u8bd5"
    unicodeDecode
    touch "$1/$response_str"
}
IFS_old="$IFS"
IFS=$'\n'
if [[ "$1" = "compress" ]]; then
   startCompress
elif [[ "$1" = "testchinese" ]]; then
    testChinese "$2"
elif [[ $# -ne 0 && -f "$1" ]]; then
    local filename="${1##*/}"
	mUpload2Pcs "$1" "$pcsroot$2/$filename"
else
	initSyncy
	startSync
fi
IFS=$IFS_old
exit 0
